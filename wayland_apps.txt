= Writing and Porting Applications on Wayland =

This section is aimed for developers interested in building applications for
Wayland or porting existent ones to it.

In order to deploy applications on Linux systems, developers commonly use
widget library "toolkits" due their high-level nature of abstraction. Wayland
is an underlying implementation ("backend") for the toolkits, in a similar
way as X11 and DirectFB, and in principle should not require any changes on
applications. However, complex applications quite often want to access backend
routines in which was not exposed by a toolkit and in general they are free for
doing so. In this case, applications must be ported and the Wayland
implementation has to provide the needed functionalities. Section x.x
describes how Clutter toolkit could be used for application developers build a
client on Wayland. Specially it describes the "best-practices" in comparison
with a X11 environment and how to access native Wayland types from an
application built on Clutter. Likewise, Section x.x describes it all similarly
but on Qt 5 framework.

We remark that Wayland protocol is flexible in not defining any drawing
interface and virtually any abstraction library that lets you render into a
sharable buffer is enough. Therefore to give a better picture for application
developer, Section x.x shows how to write standalone OpenGL applications, using
EGL as window system binding. That section could be used also for developers
that want to understand the Wayland native types in general. The last section
outlines applications compatibility.

== per-toolkit "best practices" (Tiago/Rob) ==
        - E.g. explain how writing a GTK app under Wayland is different than
          X, same for Qt.  Highlight places where things may be different or
          have performance implications.
        - "don't use raw X calls", neither Wayland in principle but one would
          like to access native Wayland types for more robust and complex
          operation.
        - explain a bit about grabs and compare with the X style: grabs don't
          work the way they do under X.  Can't get window absolute position
          under Wayland.
        - how to get good performance? what not?
        - clutter code snips (bonus points for dnd, selection, etc)
        - qt code snips

=== Qt 5 framework ===
        - mention something about that it's enough to just change "-platform
          wayland" by "-platform xcb" and the same app should work seamlessly,
          without the need to be recompiled.

== standalone OpenGL with EGL (Rob?) ==
        - How does one write low level EGL apps against Wayland? What about
          Cairo or just custom CPU rendered apps? This may come down to just
          documenting GBM nicely.
        - some code snips showing how to do so

== Applications Interoperability ==
        - define level of app compatibility; which classes of apps donâ€™t
          change, which need recompile, which need more.
        - we should also note something about compatibility here; Wayland apps
          for different verticals with different window system behavior may not
          behave the same; hopefully extensions for such will make it possible
          to write portable & scalable apps.
----
TODO:
- why Wayland? Is it better than X? Memory wise is better? Simplicity? What,
  in the application's perspective? We have to somewhere document it around
  and try to be very clear in this regarding.
